"""Author of a post, comment or even both."""
type Author {
  """A unique id of the author"""
  id: ID

  """Name of the author"""
  name: String
  posts(filter: AuthorFilter = {}, first: Int, offset: Int = 0, after: Int = 0): Posts
}

input AuthorFilter {
  id: ID
  name: String
}

"""A list of authors"""
type Authors {
  """Total number of records"""
  total: Int

  """Number of records in selection"""
  count: Int

  """Authors"""
  nodes: [Author]
}

"""A comment for a blog post"""
type Comment {
  id: ID

  """Author of a post, comment or even both."""
  author(id: ID): Author
  title: String
  content: String
  date: String
}

input CommentFilter {
  id: ID
  name: String
}

"""Comment item input type"""
input CommentInputType {
  """Comment author"""
  authorId: ID!

  """Post"""
  postId: ID!

  """Comment title"""
  title: String

  """Comment content"""
  content: String
}

"""A list of blog post comments"""
type Comments {
  """Total number of records"""
  total: Int

  """Number of records in selection"""
  count: Int

  """Comments"""
  nodes: [Comment]
}

"""Mutate blog data"""
type Mutation {
  createAuthor(name: String!): Author
  updateAuthor(id: ID!, name: String!): Author
  deleteAuthor(id: ID!): Author
  createPost(PostInputType: PostInputType): Post
  updatePost(UpdatePostInputType: UpdatePostInputType): Post
  createComment(input: CommentInputType): Comment
  updateComment(id: ID!, title: String, content: String): Comment
}

"""A blog post"""
type Post {
  id: ID
  title: String
  content: String
  date: String

  """Author of a post, comment or even both."""
  author(id: ID): Author
  comments(filter: CommentFilter = {}, first: Int, after: Int = 0): Comments
}

"""Post item input type"""
input PostInputType {
  """Post title"""
  title: String

  """Post content"""
  content: String
  authorId: ID!
}

"""A list of blog posts"""
type Posts {
  """Total number of records"""
  total: Int

  """Number of records in selection"""
  count: Int

  """Albums"""
  nodes: [Post]
}

"""A simple blog API"""
type Query {
  """Author of a post, comment or even both."""
  author(id: ID): Author

  """Metadata for authors"""
  authors(filter: AuthorFilter = {}, first: Int, offset: Int = 0, after: Int = 0): Authors
  post(id: ID!): Post
  posts(filter: AuthorFilter = {}, first: Int, offset: Int = 0, after: Int = 0): Posts
  comment(id: ID!): Comment
  comments(filter: CommentFilter = {}, first: Int, after: Int = 0): Comments
}

"""Post item input type"""
input UpdatePostInputType {
  """Post title"""
  title: String

  """Post content"""
  content: String
}

